class UpdateSymphonyNightly<%= Time.now.strftime('%Y%m%d') %> < ActiveRecord::Migration
  # order matters for libraries and locations because of the foreign key
  SYMPHONY_TABLES = ['statuses',
                     'item_types',
                     'circulation_rules',
                     'locations',
                     'libraries'].freeze

  def self.up
    SYMPHONY_TABLES.each do |table|
      backup_table = 'backup_' + table
      drop_table(backup_table) if table_exists?(backup_table)
      rename_table(table, backup_table)
    end

    foreign_keys('backup_locations').each do |fkey|
      rename_column      fkey.from_table, fkey.options[:column], 'backup_' + fkey.options[:column]
      remove_foreign_key fkey.from_table, fkey.to_table
      add_foreign_key    fkey.from_table, fkey.to_table
    end

    create_table_statues
    create_table_item_types
    create_table_circulation_rules
    create_table_libraries
    create_table_locations

    <%- CSV.foreach('data/data4discovery', col_sep: '|') do |row| -%>
      <%- case row[0]
        when 'CIRC' -%> CirculationRule.create(short_code: '<%= row[2] %>', name: "<%= row[11] %>")
      <%- when 'ITYP' -%> ItemType.create(short_code: '<%= row[2] %>', name: "<%= row[8] %>")
      <%- when 'LOCN' -%> Status.create(short_code: '<%= row[2] %>', name: "<%= row[6] %>")
      <%- when 'LIBR' -%> Location.create(short_code: '<%= row[2] %>', name: "<%= row[21] %>")
      <%- when 'LIBG' -%> Library.create(short_code: '<%= row[2] %>', name: "<%= row[3] %>")
      <%- else -%>
          entry = Library.find_or_initialize_by(short_code: '<%= row[0] %>')
          entry.proxy = "<%= row[1] %>"
          entry.save
      <%- end -%>
    <%- end -%>

    # copy from backup information that would otherwise be lost
    Location.all.each do |location|
      backup = BackupLocation.where(short_code: location.short_code).first
      next unless backup

      location.url = backup.url
      location.old_short_code = backup.old_short_code
      backup_library = BackupLibrary.find_by id: backup.backup_library_id
      if backup_library
        library = Library.where(short_code: backup_library.short_code).first
        location.library = library
      end
      location.save
    end

    Library.all.each do |library|
      backup = BackupLibrary.where(short_code: library.short_code).first
      next unless backup

      library.url = backup.url
      library.old_short_code = backup.old_short_code
      library.neos_url = backup.neos_url
      library.proxy = backup.proxy
      library.save
    end
  end

  def self.down
    SYMPHONY_TABLES.each do |table|
      backup_table = 'backup_' + table
      drop_table(table) if table_exists?(backup_table)
      rename_table(backup_table, table)
    end

    foreign_keys('locations').each do |fkey|
      rename_column      fkey.from_table, fkey.options[:column], fkey.options[:column].gsub('backup_', '')
      remove_foreign_key fkey.from_table, fkey.to_table
      add_foreign_key    fkey.from_table, fkey.to_table
    end

    create_table :backup_libraries do |t|
      t.string :short_code
      t.string :old_short_code
      t.string :name
      t.string :url
      t.string :neos_url
      t.string :proxy

      t.timestamps null: false
    end
    create_table :backup_locations do |t|
      t.string :short_code
      t.string :old_short_code
      t.string :name
      t.string :url
      t.references :backup_library, index: true, foreign_key: true

      t.timestamps null: false
    end
  end

  def create_table_statues
    create_table :statuses do |t|
      t.string :short_code
      t.string :name

      t.timestamps null: false
    end
  end

  def create_table_item_types
    create_table :item_types do |t|
      t.string :short_code
      t.string :name

      t.timestamps null: false
    end
  end

  def create_table_circulation_rules
    create_table :circulation_rules do |t|
      t.string :short_code
      t.string :name

      t.timestamps null: false
    end
  end

  def create_table_libraries
    create_table :libraries do |t|
      t.string :short_code
      t.string :old_short_code
      t.string :name
      t.string :url
      t.string :neos_url
      t.string :proxy

      t.timestamps null: false
    end
  end

  def create_table_locations
    create_table :locations do |t|
      t.string :short_code
      t.string :old_short_code
      t.string :name
      t.string :url
      t.references :library, index: true, foreign_key: true

      t.timestamps null: false
    end
    add_index :locations, :short_code, unique: true
  end
end
